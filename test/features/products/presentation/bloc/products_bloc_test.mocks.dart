// Mocks generated by Mockito 5.4.6 from annotations
// in holo_mobile/test/features/products/presentation/bloc/products_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:holo_mobile/core/logging/logger_interface.dart' as _i5;
import 'package:holo_mobile/features/products/domain/entities/product.dart'
    as _i4;
import 'package:holo_mobile/features/products/domain/usecases/get_products.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetProducts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProducts extends _i1.Mock implements _i2.GetProducts {
  MockGetProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Product>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<List<_i4.Product>>.value(<_i4.Product>[]),
          )
          as _i3.Future<List<_i4.Product>>);
}

/// A class which mocks [LoggerInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerInterface extends _i1.Mock implements _i5.LoggerInterface {
  MockLoggerInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void network(String? message) => super.noSuchMethod(
    Invocation.method(#network, [message]),
    returnValueForMissingStub: null,
  );
}
