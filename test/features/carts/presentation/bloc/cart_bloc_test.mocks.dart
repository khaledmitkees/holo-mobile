// Mocks generated by Mockito 5.4.6 from annotations
// in holo_mobile/test/features/carts/presentation/bloc/cart_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:holo_mobile/core/logging/logger_interface.dart' as _i10;
import 'package:holo_mobile/features/carts/domain/entities/cart.dart' as _i3;
import 'package:holo_mobile/features/carts/domain/repositories/carts_repository.dart'
    as _i2;
import 'package:holo_mobile/features/carts/domain/usecases/get_cart_use_case.dart'
    as _i6;
import 'package:holo_mobile/features/carts/domain/usecases/update_cart_use_case.dart'
    as _i8;
import 'package:holo_mobile/features/products/domain/entities/product.dart'
    as _i5;
import 'package:holo_mobile/features/products/domain/repositories/products_repository.dart'
    as _i4;
import 'package:holo_mobile/features/products/domain/usecases/get_product_use_case.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartsRepository_0 extends _i1.SmartFake
    implements _i2.CartsRepository {
  _FakeCartsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCart_1 extends _i1.SmartFake implements _i3.Cart {
  _FakeCart_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductsRepository_2 extends _i1.SmartFake
    implements _i4.ProductsRepository {
  _FakeProductsRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProduct_3 extends _i1.SmartFake implements _i5.Product {
  _FakeProduct_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartUseCase extends _i1.Mock implements _i6.GetCartUseCase {
  MockGetCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCartsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CartsRepository);

  @override
  _i7.Future<_i3.Cart> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i7.Future<_i3.Cart>.value(
              _FakeCart_1(this, Invocation.method(#call, [id])),
            ),
          )
          as _i7.Future<_i3.Cart>);
}

/// A class which mocks [UpdateCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCartUseCase extends _i1.Mock implements _i8.UpdateCartUseCase {
  MockUpdateCartUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCartsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CartsRepository);

  @override
  _i7.Future<_i3.Cart> call(int? id, int? productId, int? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id, productId, quantity]),
            returnValue: _i7.Future<_i3.Cart>.value(
              _FakeCart_1(
                this,
                Invocation.method(#call, [id, productId, quantity]),
              ),
            ),
          )
          as _i7.Future<_i3.Cart>);
}

/// A class which mocks [GetProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUseCase extends _i1.Mock implements _i9.GetProductUseCase {
  MockGetProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductsRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.ProductsRepository);

  @override
  _i7.Future<_i5.Product> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i7.Future<_i5.Product>.value(
              _FakeProduct_3(this, Invocation.method(#call, [id])),
            ),
          )
          as _i7.Future<_i5.Product>);
}

/// A class which mocks [LoggerInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerInterface extends _i1.Mock implements _i10.LoggerInterface {
  MockLoggerInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#debug, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#info, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#warning, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void fatal(String? message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#fatal, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  void network(String? message) => super.noSuchMethod(
    Invocation.method(#network, [message]),
    returnValueForMissingStub: null,
  );
}
